#BlueJ class context
comment0.params=
comment0.target=QueryDepotTree()
comment1.params=file
comment1.target=QueryDepotTree(java.lang.String)
comment10.params=tree
comment10.target=void\ incFreq(interfaces.TreeIF)
comment10.text=\r\n\ Incrementa\ la\ frecuencia\ del\ nodo\ hoja.\r\n\ Si\ no\ encuentra\ una\ hoja,\ delega\ en\ el\ m\u00E9todo\ buildTree\r\n\ la\ construcci\u00F3n\ de\ un\ nuevo\ nodo\ hoja,\ con\ frecuencia\ 1.\r\n\ @param\ tree\ El\ \u00E1rbol\ sobre\ el\ que\ se\ buscar\u00E1\ el\ nodo\ frecuencia.\r\n
comment11.params=tree\ str
comment11.target=interfaces.TreeIF\ find(interfaces.TreeIF,\ java.lang.String)
comment11.text=\r\n\ Busca\ en\ los\ hijos\ de\ un\ \u00E1rbol\ dado,\ el\ primer\ car\u00E1cter\ de\ la\ cadena\r\n\ Si\ es\ encontrado,\ devuelve\ el\ hijo\r\n\ En\ caso\ contrario,\ retorna\ null\r\n\ @param\ tree\r\n\ @param\ str\r\n\ @return\r\n
comment12.params=tree
comment12.target=interfaces.TreeIF\ getFreqTree(interfaces.TreeIF)
comment12.text=\r\n\ Obtiene\ el\ \u00E1rbol\ hoja\ que\ contiene\ la\ frecuencia.\r\n\ \r\n\ @param\ \u00E1rbol\ con\ el\ \u00FAltimo\ caracter\ de\ la\ cadena.\ Entre\ sus\ hijos\ tiene\ que\r\n\ encontrarse\ uno\ que\ sea\ hoja\ y\ que\ sea\ una\ instancia\ de\ Integer\r\n\ @return\ \u00E1rbol\ con\ el\ nodo\ de\ frecuencia\ como\ raiz\ del\ mismo.\r\n
comment13.params=tree\ str
comment13.target=interfaces.TreeIF\ buildTree(interfaces.TreeIF,\ java.lang.String)
comment13.text=\r\n\ Construye\ un\ \u00E1rbol\ de\ consultas\ con\ la\ estructura\ indicada\r\n\ en\ el\ enunciado\ con\ la\ cadena\ proporcionada.\ Si\ la\ cadena\r\n\ tiene\ una\ longitud\ 0,\ crea\ \u00FAnicamente\ el\ nodo\ de\ la\ frecuencia\r\n\ con\ el\ valor\ inicial\ 1.\r\n\ \r\n\ @param\ tree\ el\ \u00E1rbol\ padre\ al\ que\ a\u00F1adir\ el\ resto.\r\n\ @param\ str\ la\ cadena\ a\ insertar\ en\ el\ nuevo\ \u00E1rbol.\r\n\ @return\ el\ \u00E1rbol\ con\ los\ nuevos\ nodos.\r\n
comment14.params=tree\ str
comment14.target=void\ decFreqTree(interfaces.TreeIF,\ java.lang.String)
comment14.text=\r\n\ Realiza\ la\ operaci\u00F3n\ de\ decrementar\ la\ frecuencia\ de\ una\ consulta.\r\n\ Su\ funcionamiento\ se\ basa\ en\ ir\ recorriendo\ por\ completo\ la\ cadena\r\n\ de\ la\ consulta\ y\ tratar\ de\ llegar\ al\ \u00E1rbol\ que\ contiene\ el\ \u00FAltimo\r\n\ car\u00E1cter.\ Una\ vez\ llegados,\ seg\u00FAn\ los\ requerimientos\ del\ enunciado\r\n\ se\ eval\u00FAa\ si\ la\ frecuencia\ es\ mayor\ que\ 1\ de\ modo\ que\ se\ resta\ 1\ al\r\n\ valor\ obtenido\ o,\ en\ caso\ contrario,\ se\ elimina\ toda\ la\ rama\ haciendo\r\n\ uso\ de\ las\ variables\ auxiliares\ auxTree\ y\ numchild\ que\ indican\ que\r\n\ \u00E1rbol\ e\ hijo\ de\ este,\ deben\ ser\ eliminados.\ \r\n\ @param\ tree\ el\ \u00E1rbol\ que\ contiene\ la\ consulta\ a\ decrementar.\r\n\ @param\ str\ texto\ de\ la\ consulta\ a\ decrementar.\r\n
comment15.params=tree
comment15.target=boolean\ hasMultipleChild(interfaces.TreeIF)
comment15.text=\r\n\ Comprueba\ si\ un\ \u00E1rbol\ tiene\ m\u00E1s\ de\ un\ hijo\r\n\ @param\ tree\ el\ \u00E1rbol\ a\ evaluar.\r\n\ @return\ la\ comprobaci\u00F3n\ de\ si\ tiene\ varios\ hijos.\r\n
comment16.params=tree\ c
comment16.target=int\ getNumberChild(interfaces.TreeIF,\ java.lang.Character)
comment16.text=\r\n\ Obtiene\ el\ n\u00FAmero\ de\ hijo\ que\ corresponde\ con\ un\ car\u00E1cter.\r\n\ @param\ tree\ El\ padre\ sobre\ el\ que\ realizar\ la\ b\u00FAsqueda.\r\n\ @param\ c\ El\ caracter\ a\ buscar.\r\n\ @return\ El\ n\u00FAmero\ de\ hijo,\ -1\ si\ no\ es\ encontrado.\r\n
comment17.params=tree\ element
comment17.target=boolean\ childrenContains(interfaces.TreeIF,\ java.lang.Object)
comment17.text=\r\n\ Devuelve\ verdadero\ o\ falso\ si\ el\ elemento\ a\ buscar\ est\u00E1\ entre\r\n\ el\ primer\ nivel\ de\ hijos\ del\ \u00E1rbol.\r\n\ \r\n\ @param\ tree\ El\ arbol\ donde\ buscar\r\n\ @param\ element\ El\ objeto\ a\ buscar\r\n\ @return\ el\ resultado\ de\ la\ b\u00FAsqueda\r\n
comment2.params=
comment2.target=int\ numQueries()
comment2.text=\r\n\ Devuelve\ el\ n\u00FAmero\ de\ consultas\ diferentes\ (sin\ contar\ repeticiones)\r\n\ que\ hay\ almacenadas\ en\ el\ dep\u00F3sito\r\n\ @returns\ el\ n\u00FAmero\ de\ consultas\ diferentes\ almacenadas\r\n
comment3.params=q
comment3.target=int\ getFreqQuery(java.lang.String)
comment3.text=\r\n\ Consulta\ la\ frecuencia\ de\ una\ consulta\ en\ el\ dep\u00F3sito\r\n\ @returns\ la\ frecuencia\ de\ la\ consulta.\ Si\ no\ est\u00E1,\ devolver\u00E1\ 0\r\n\ @param\ el\ texto\ de\ la\ consulta\r\n
comment4.params=prefix
comment4.target=interfaces.ListIF\ listOfQueries(java.lang.String)
comment4.text=\r\n\ Dado\ un\ prefijo\ de\ consulta,\ devuelve\ una\ lista,\ ordenada\ por\r\n\ frecuencias\ de\ mayor\ a\ menor,\ de\ todas\ las\ consultas\ almacenadas\r\n\ en\ el\ dep\u00F3sito\ que\ comiencen\ por\ dicho\ prefijo\r\n\ @returns\ la\ lista\ de\ consultas\ ordenada\ por\ frecuencias\ y\ orden\r\n\ lexicogr\u00E1fico\ en\ caso\ de\ coincidencia\ de\ frecuencia\r\n\ @param\ el\ prefijo\r\n
comment5.params=str
comment5.target=void\ incFreqQuery(java.lang.String)
comment5.text=\r\n\ Incrementa\ en\ uno\ la\ frecuencia\ de\ una\ consulta\ en\ el\ dep\u00F3sito\r\n\ Si\ la\ consulta\ no\ exist\u00EDa\ en\ la\ estructura,\ la\ deber\u00E1\ a\u00F1adir\r\n\ @param\ el\ texto\ de\ la\ consulta\r\n
comment6.params=q
comment6.target=void\ decFreqQuery(java.lang.String)
comment6.text=\r\n\ Decrementa\ en\ uno\ la\ frecuencia\ de\ una\ consulta\ en\ el\ dep\u00F3sito\r\n\ Si\ la\ frecuencia\ decrementada\ resultase\ ser\ 0,\ deber\u00E1\ eliminar\r\n\ la\ informaci\u00F3n\ referente\ a\ la\ consulta\ del\ dep\u00F3sito\r\n\ @precondici\u00F3n\ la\ consulta\ debe\ estar\ ya\ en\ el\ dep\u00F3sito\r\n\ @param\ el\ texto\ de\ la\ consulta\r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\r\n\ Representaci\u00F3n\ de\ un\ \u00E1rbol\ de\ queries.\r\n\ Utiliza\ el\ toString()\ de\ los\ \u00E1rboles\ din\u00E1micos\ donde\ se\r\n\ ha\ elegido\ el\ recorrido\ en\ preorden\ para\ mostrar\ los\ nodos\ \r\n\ del\ \u00E1rbol.\r\n
comment8.params=tree\ str\ prefix\ list
comment8.target=interfaces.ListIF\ buildListOfQueries(interfaces.TreeIF,\ java.lang.String,\ java.lang.String,\ interfaces.ListIF)
comment8.text=\r\n\ Construye\ una\ lista\ de\ queries\ que\ se\ utilizar\u00E1\ como\ salida\ del\r\n\ m\u00E9todo\ listOfQueries.\r\n\ \r\n\ @param\ tree\ \u00E1rbol\ hijo\ eliminando\ la\ ra\u00EDz\ com\u00FAn\ correspondiente\ al\ prefijo.\r\n\ @param\ str\r\n\ @param\ prefix\ prefijo\ de\ b\u00FAsqueda\r\n\ @param\ list\ lista\ con\ las\ sugerencias\ obtenidas.\r\n\ @return\r\n
comment9.params=tree\ str
comment9.target=void\ findStringTree(interfaces.TreeIF,\ java.lang.String)
comment9.text=\r\n\ Busca\ recursivamente\ una\ cadena\ en\ un\ \u00E1rbol.\ Cuando\ deja\ de\ encontrarla\r\n\ llama\ al\ m\u00E9todo\ buildTree\ para\ seguir\ construyendo\ el\ \u00E1rbol\ con\ la\r\n\ subcadena\ restante\r\n\ \r\n\ @param\ tree\r\n\ @param\ str\r\n
numComments=18
